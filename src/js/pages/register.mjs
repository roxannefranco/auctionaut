import '../../css/app.css'
import { checkAuth } from '../functions.mjs'
import postRegister from '../api/register.mjs'
import {
  email as emailIcon,
  password as passwordIcon,
  username as usernameIcon
} from '../blocks/icons.mjs'

function runRegister() {
  checkAuth()
}

// Select logo element and add as svg
const logo = document.querySelector('#logo')

logo.innerHTML = `
<svg class="inline-block" width="186" height="46" viewBox="0 0 186 46" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M6.66563 3.01955C6.66563 4.2023 6.00004 5.22622 5.03066 5.72168V12.1085C8.68205 7.91198 14.0058 5.26816 19.934 5.26816C30.9433 5.26816 39.868 14.3863 39.868 25.6341C39.868 36.8819 30.9433 46 19.934 46C8.92476 46 0 36.8819 0 25.6341C0 22.2292 0.817851 19.0194 2.2638 16.1987V5.65346C1.36309 5.13609 0.754603 4.15042 0.754603 3.01955C0.754603 1.3519 2.07783 0 3.71012 0C5.3424 0 6.66563 1.3519 6.66563 3.01955ZM34.3343 23.3212C34.3343 29.1048 27.8871 33.7933 19.934 33.7933C11.9809 33.7933 5.53372 29.1048 5.53372 23.3212C5.53372 17.5377 11.9809 12.8492 19.934 12.8492C27.8871 12.8492 34.3343 17.5377 34.3343 23.3212Z" fill="#5E2FF4"/>
    <path d="M65.491 23.9334V31.4436C65.1904 31.7933 64.7313 32.1686 64.1135 32.5695C63.504 32.9704 62.7234 33.3158 61.7717 33.6058C60.82 33.8873 59.6846 34.028 58.3655 34.028C57.1716 34.028 56.0863 33.8319 55.1095 33.4395C54.1328 33.0386 53.2937 32.4543 52.5924 31.6867C51.8912 30.9105 51.3485 29.9637 50.9645 28.8464C50.5888 27.729 50.4009 26.4496 50.4009 25.0081V23.9078C50.4009 22.4663 50.5888 21.1869 50.9645 20.0696C51.3402 18.9522 51.8703 18.0097 52.5549 17.242C53.2395 16.4659 54.0534 15.8773 54.9968 15.4764C55.9402 15.0755 56.9838 14.8751 58.1276 14.8751C59.7555 14.8751 61.0871 15.1438 62.1223 15.6811C63.1576 16.21 63.9423 16.9435 64.4766 17.8817C65.0193 18.82 65.3532 19.899 65.4785 21.1187H61.5463C61.4628 20.496 61.2958 19.9587 61.0454 19.5066C60.8033 19.0545 60.4568 18.7091 60.006 18.4703C59.5552 18.2229 58.9708 18.0992 58.2528 18.0992C57.6767 18.0992 57.1549 18.2229 56.6874 18.4703C56.2282 18.7091 55.84 19.0716 55.5228 19.5578C55.2055 20.044 54.9634 20.6496 54.7965 21.3746C54.6295 22.091 54.546 22.9269 54.546 23.8822V25.0081C54.546 25.9634 54.6295 26.8036 54.7965 27.5286C54.9718 28.2536 55.2264 28.8592 55.5604 29.3454C55.8943 29.823 56.3159 30.1855 56.8252 30.4329C57.3428 30.6802 57.9439 30.8039 58.6285 30.8039C59.1628 30.8039 59.6136 30.7612 59.9809 30.6759C60.3483 30.5821 60.6488 30.467 60.8826 30.3305C61.1163 30.1855 61.2917 30.0533 61.4085 29.9339V26.8377H58.1651V23.9334H65.491Z" fill="#5E2FF4"/>
    <path d="M75.2588 30.4712V24.5347C75.2588 24.1168 75.1962 23.7585 75.071 23.46C74.9458 23.1615 74.7496 22.9269 74.4824 22.7563C74.2153 22.5857 73.8688 22.5005 73.443 22.5005C73.084 22.5005 72.771 22.5644 72.5038 22.6924C72.245 22.8203 72.0446 23.0037 71.9027 23.2425C71.7691 23.4813 71.7023 23.7756 71.7023 24.1253H67.7952C67.7952 23.5027 67.933 22.9227 68.2085 22.3853C68.484 21.8479 68.8763 21.3746 69.3856 20.9651C69.9032 20.5557 70.521 20.2401 71.239 20.0184C71.957 19.7881 72.7626 19.6729 73.6559 19.6729C74.7162 19.6729 75.6596 19.8563 76.4861 20.2231C77.3209 20.5813 77.9805 21.1229 78.4647 21.8479C78.9489 22.5644 79.191 23.4685 79.191 24.5603V30.3561C79.191 31.192 79.2369 31.8488 79.3288 32.3264C79.429 32.7955 79.5709 33.2049 79.7545 33.5546V33.7721H75.8098C75.6262 33.3713 75.4884 32.8766 75.3966 32.288C75.3048 31.691 75.2588 31.0854 75.2588 30.4712ZM75.7472 25.328L75.7723 27.5286H73.8312C73.3971 27.5286 73.0214 27.584 72.7042 27.6949C72.3953 27.8058 72.1448 27.9593 71.9528 28.1555C71.7608 28.3431 71.6189 28.5649 71.527 28.8208C71.4435 29.0681 71.4018 29.3411 71.4018 29.6396C71.4018 29.9211 71.4686 30.177 71.6022 30.4073C71.7357 30.629 71.9194 30.8039 72.1532 30.9318C72.3869 31.0598 72.6583 31.1237 72.9672 31.1237C73.4764 31.1237 73.9105 31.0214 74.2695 30.8167C74.6369 30.612 74.9207 30.3646 75.1211 30.0746C75.3215 29.7761 75.4216 29.4989 75.4216 29.243L76.3608 30.9062C76.2106 31.2474 76.0269 31.6014 75.8098 31.9682C75.5928 32.3264 75.3173 32.6633 74.9833 32.9789C74.6494 33.286 74.2445 33.5376 73.7686 33.7338C73.3011 33.9299 72.7376 34.028 72.078 34.028C71.2265 34.028 70.4542 33.8532 69.7613 33.5035C69.0684 33.1452 68.5132 32.6548 68.0958 32.0321C67.6867 31.4095 67.4821 30.693 67.4821 29.8827C67.4821 29.1577 67.6115 28.5137 67.8703 27.9508C68.1291 27.3878 68.5174 26.9102 69.035 26.5178C69.5609 26.1255 70.2205 25.8312 71.0136 25.635C71.8067 25.4303 72.7334 25.328 73.7937 25.328H75.7472Z" fill="#5E2FF4"/>
    <path d="M85.6779 22.8331V33.7721H81.7707V19.9288H85.4399L85.6779 22.8331ZM85.1769 26.3643L84.1876 26.3899C84.1876 25.4175 84.3003 24.5262 84.5258 23.7159C84.7595 22.8971 85.0976 22.1849 85.5401 21.5793C85.9826 20.9737 86.5294 20.5046 87.1806 20.1719C87.8401 19.8393 88.5999 19.6729 89.4598 19.6729C90.0609 19.6729 90.6077 19.7668 91.1003 19.9544C91.5928 20.1335 92.0144 20.4193 92.3651 20.8116C92.7241 21.1954 92.9996 21.6987 93.1916 22.3213C93.3836 22.9355 93.4796 23.6733 93.4796 24.5347V33.7721H89.5725V25.0209C89.5725 24.4068 89.4973 23.9419 89.3471 23.6263C89.2051 23.3022 88.9964 23.0805 88.7209 22.961C88.4454 22.8416 88.1156 22.7819 87.7316 22.7819C87.3142 22.7819 86.9427 22.8757 86.6171 23.0634C86.2998 23.2425 86.0327 23.4941 85.8156 23.8183C85.5986 24.1424 85.4358 24.5219 85.3272 24.9569C85.227 25.3919 85.1769 25.8611 85.1769 26.3643ZM93.0789 26.1596L91.8391 26.2619C91.8391 25.3237 91.9476 24.4537 92.1647 23.6519C92.3818 22.8502 92.7074 22.155 93.1415 21.5665C93.5756 20.9694 94.1141 20.5046 94.7569 20.1719C95.4081 19.8393 96.1637 19.6729 97.0236 19.6729C97.6581 19.6729 98.2341 19.7668 98.7517 19.9544C99.2777 20.1421 99.7285 20.4449 100.104 20.8628C100.488 21.2807 100.785 21.8309 100.993 22.5132C101.202 23.1871 101.306 24.0144 101.306 24.9953V33.7721H97.3742V24.9953C97.3742 24.3897 97.2991 23.9291 97.1488 23.6135C97.0069 23.298 96.7982 23.0805 96.5227 22.961C96.2555 22.8416 95.9341 22.7819 95.5584 22.7819C95.141 22.7819 94.7778 22.8715 94.4689 23.0506C94.16 23.2212 93.9012 23.46 93.6925 23.7671C93.4838 24.0656 93.3293 24.4196 93.2292 24.829C93.129 25.2384 93.0789 25.6819 93.0789 26.1596Z" fill="#5E2FF4"/>
    <path d="M110.31 34.028C109.233 34.028 108.269 33.8532 107.418 33.5035C106.566 33.1538 105.844 32.6718 105.251 32.0577C104.667 31.4351 104.22 30.7186 103.911 29.9083C103.602 29.098 103.448 28.2323 103.448 27.3111V26.8249C103.448 25.7928 103.59 24.8418 103.874 23.9718C104.157 23.1018 104.571 22.3469 105.113 21.7072C105.664 21.059 106.341 20.56 107.142 20.2103C107.944 19.8521 108.858 19.6729 109.885 19.6729C110.845 19.6729 111.7 19.835 112.452 20.1591C113.203 20.4747 113.838 20.931 114.355 21.5281C114.873 22.1166 115.265 22.8288 115.532 23.6647C115.808 24.4921 115.946 25.4218 115.946 26.4539V28.0915H105.026V25.5199H112.114V25.2128C112.114 24.7266 112.026 24.3002 111.851 23.9334C111.684 23.5666 111.433 23.2852 111.099 23.089C110.774 22.8843 110.36 22.7819 109.86 22.7819C109.384 22.7819 108.987 22.8843 108.67 23.089C108.353 23.2937 108.098 23.5837 107.906 23.959C107.722 24.3258 107.589 24.7565 107.505 25.2512C107.422 25.7374 107.38 26.2619 107.38 26.8249V27.3111C107.38 27.8484 107.451 28.3389 107.593 28.7824C107.735 29.2259 107.944 29.6055 108.219 29.9211C108.495 30.2367 108.828 30.484 109.221 30.6632C109.613 30.8423 110.06 30.9318 110.561 30.9318C111.179 30.9318 111.767 30.8124 112.327 30.5736C112.886 30.3262 113.37 29.9424 113.779 29.4221L115.608 31.5587C115.332 31.9682 114.944 32.3648 114.443 32.7486C113.95 33.1239 113.358 33.431 112.665 33.6698C111.972 33.9086 111.187 34.028 110.31 34.028Z" fill="#5E2FF4"/>
    <path d="M121.769 23.153V33.7721H117.862V19.9288H121.531L121.769 23.153ZM125.814 19.8265L125.751 23.5496C125.584 23.524 125.367 23.5027 125.1 23.4856C124.833 23.46 124.603 23.4472 124.411 23.4472C123.91 23.4472 123.476 23.5112 123.109 23.6391C122.75 23.7585 122.449 23.9377 122.207 24.1765C121.973 24.4153 121.798 24.7138 121.681 25.0721C121.564 25.4218 121.506 25.8269 121.506 26.2875L120.767 25.9165C120.767 25.0039 120.855 24.168 121.03 23.4088C121.205 22.6497 121.46 21.9929 121.794 21.4385C122.128 20.8756 122.537 20.4406 123.021 20.1335C123.505 19.8265 124.056 19.6729 124.674 19.6729C124.874 19.6729 125.079 19.6857 125.288 19.7113C125.496 19.7369 125.672 19.7753 125.814 19.8265Z" fill="#5E2FF4"/>
    <path d="M131.249 22.8843V33.7721H127.329V19.9288H131.011L131.249 22.8843ZM130.735 26.3643L129.758 26.3899C129.758 25.3493 129.884 24.4153 130.134 23.588C130.385 22.7606 130.739 22.0569 131.198 21.4769C131.666 20.8884 132.221 20.4406 132.864 20.1335C133.515 19.8265 134.233 19.6729 135.018 19.6729C135.652 19.6729 136.233 19.7668 136.759 19.9544C137.285 20.1421 137.735 20.4449 138.111 20.8628C138.495 21.2722 138.787 21.8181 138.988 22.5005C139.188 23.1743 139.288 24.0059 139.288 24.9953V33.7721H135.356V24.9825C135.356 24.4025 135.277 23.9547 135.118 23.6391C134.96 23.3235 134.726 23.1018 134.417 22.9738C134.116 22.8459 133.749 22.7819 133.315 22.7819C132.856 22.7819 132.463 22.8757 132.138 23.0634C131.812 23.2425 131.545 23.4941 131.336 23.8183C131.128 24.1424 130.973 24.5219 130.873 24.9569C130.781 25.3919 130.735 25.8611 130.735 26.3643Z" fill="#5E2FF4"/>
    <path d="M149.019 30.4712V24.5347C149.019 24.1168 148.956 23.7585 148.831 23.46C148.705 23.1615 148.509 22.9269 148.242 22.7563C147.975 22.5857 147.629 22.5005 147.203 22.5005C146.844 22.5005 146.531 22.5644 146.264 22.6924C146.005 22.8203 145.804 23.0037 145.662 23.2425C145.529 23.4813 145.462 23.7756 145.462 24.1253H141.555C141.555 23.5027 141.693 22.9227 141.968 22.3853C142.244 21.8479 142.636 21.3746 143.145 20.9651C143.663 20.5557 144.281 20.2401 144.999 20.0184C145.717 19.7881 146.522 19.6729 147.416 19.6729C148.476 19.6729 149.419 19.8563 150.246 20.2231C151.081 20.5813 151.74 21.1229 152.224 21.8479C152.709 22.5644 152.951 23.4685 152.951 24.5603V30.3561C152.951 31.192 152.997 31.8488 153.088 32.3264C153.189 32.7955 153.331 33.2049 153.514 33.5546V33.7721H149.57C149.386 33.3713 149.248 32.8766 149.156 32.288C149.064 31.691 149.019 31.0854 149.019 30.4712ZM149.507 25.328L149.532 27.5286H147.591C147.157 27.5286 146.781 27.584 146.464 27.6949C146.155 27.8058 145.905 27.9593 145.713 28.1555C145.52 28.3431 145.379 28.5649 145.287 28.8208C145.203 29.0681 145.161 29.3411 145.161 29.6396C145.161 29.9211 145.228 30.177 145.362 30.4073C145.495 30.629 145.679 30.8039 145.913 30.9318C146.147 31.0598 146.418 31.1237 146.727 31.1237C147.236 31.1237 147.67 31.0214 148.029 30.8167C148.397 30.612 148.68 30.3646 148.881 30.0746C149.081 29.7761 149.181 29.4989 149.181 29.243L150.121 30.9062C149.97 31.2474 149.787 31.6014 149.57 31.9682C149.352 32.3264 149.077 32.6633 148.743 32.9789C148.409 33.286 148.004 33.5376 147.528 33.7338C147.061 33.9299 146.497 34.028 145.838 34.028C144.986 34.028 144.214 33.8532 143.521 33.5035C142.828 33.1452 142.273 32.6548 141.855 32.0321C141.446 31.4095 141.242 30.693 141.242 29.8827C141.242 29.1577 141.371 28.5137 141.63 27.9508C141.889 27.3878 142.277 26.9102 142.795 26.5178C143.321 26.1255 143.98 25.8312 144.773 25.635C145.566 25.4303 146.493 25.328 147.553 25.328H149.507Z" fill="#5E2FF4"/>
    <path d="M163.47 30.4329V19.9288H167.402V33.7721H163.72L163.47 30.4329ZM163.883 27.6053L164.96 27.5798C164.96 28.5095 164.852 29.3667 164.635 30.1514C164.426 30.9361 164.109 31.6185 163.683 32.1985C163.265 32.7785 162.744 33.2305 162.117 33.5546C161.5 33.8702 160.778 34.028 159.951 34.028C159.283 34.028 158.669 33.9342 158.11 33.7466C157.559 33.5504 157.083 33.2476 156.683 32.8382C156.282 32.4202 155.973 31.8871 155.756 31.2389C155.539 30.5821 155.43 29.7974 155.43 28.8848V19.9288H159.337V28.9103C159.337 29.2686 159.379 29.5756 159.463 29.8315C159.554 30.0789 159.676 30.2836 159.826 30.4457C159.984 30.6077 160.176 30.7271 160.402 30.8039C160.636 30.8807 160.89 30.919 161.166 30.919C161.859 30.919 162.401 30.774 162.794 30.484C163.194 30.1855 163.474 29.7889 163.633 29.2942C163.8 28.7909 163.883 28.228 163.883 27.6053Z" fill="#5E2FF4"/>
    <path d="M176.832 19.9288V22.7307H168.792V19.9288H176.832ZM170.633 16.5H174.553V29.4349C174.553 29.8187 174.599 30.113 174.69 30.3177C174.782 30.5224 174.933 30.6674 175.141 30.7527C175.35 30.8295 175.617 30.8679 175.943 30.8679C176.176 30.8679 176.377 30.8593 176.544 30.8423C176.711 30.8252 176.865 30.8039 177.007 30.7783V33.6698C176.673 33.7807 176.318 33.866 175.943 33.9257C175.567 33.9939 175.158 34.028 174.715 34.028C173.872 34.028 173.142 33.8873 172.524 33.6058C171.915 33.3243 171.447 32.8808 171.121 32.2752C170.796 31.6611 170.633 30.8636 170.633 29.8827V16.5Z" fill="#5E2FF4"/>
</svg>
`

// Select email span to add icon
const emailContainer = document.querySelector('#email-icon')
emailContainer.innerHTML = emailIcon

// Select password span to add icon
const passwordContainer = document.querySelector('#password-icon')
passwordContainer.innerHTML = passwordIcon

// Select repeat span to add icon
const repeatContainer = document.querySelector('#repeat-icon')
repeatContainer.innerHTML = passwordIcon

// Select username span to add icon
const usernameContainer = document.querySelector('#username-icon')
usernameContainer.innerHTML = usernameIcon

const form = document.querySelector('#form')

form.onsubmit = function (event) {
  // prevention default submission occurs'
  event.preventDefault()
  // select and hidde errors container
  const errorsContainer = document.querySelector('#errors')
  errorsContainer.classList.add('hidden')
  // get password inputs
  const password = document.querySelector('#password')
  const passwordRepeat = document.querySelector('#password-repeat')
  // check if both values are equal
  if (password.value === passwordRepeat.value) {
    registerNew()
  } else {
    errorsContainer.innerHTML += `<p>Passwords don't match.</p>`
    errorsContainer.classList.remove('hidden')
  }
}

/**
 * Register new User
 */
async function registerNew() {
  const username = document.querySelector('#username')
  const email = document.querySelector('#email-login')
  const password = document.querySelector('#password')
  const data = {
    name: username.value,
    email: email.value,
    password: password.value
  }
  const response = await postRegister(data)

  if ('errors' in response) {
    const errorsRegister = document.querySelector('#errors-server')
    errorsRegister.classList.remove('hidden')
    const { errors } = response
    errorsRegister.innerHTML = ''
    errors.map(function (error) {
      const { message } = error
      errorsRegister.innerHTML += `<p>${message}</p>`
    })
  } else {
    // if response is ok redirect to log in page
    window.location.replace('/login.html')
  }
}
